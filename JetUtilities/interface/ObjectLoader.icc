////////////////////////////////////////////////////////////////////////////////
//
// ObjectLoader
// ------------
//
//            12/15/2008 Philipp Schieferdecker <philipp.schieferdecker@cern.ch>
////////////////////////////////////////////////////////////////////////////////


#include <TKey.h>

#include <cassert>
#include <stdexcept>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <map>


using namespace std;


////////////////////////////////////////////////////////////////////////////////
// construction/destruction
////////////////////////////////////////////////////////////////////////////////

//______________________________________________________________________________
template <class T>
ObjectLoader<T>::ObjectLoader()
  : iloop_(0)
{
  
}


//______________________________________________________________________________
template <class T>
ObjectLoader<T>::~ObjectLoader()
{
  
}

////////////////////////////////////////////////////////////////////////////////
// implementation of member functions
////////////////////////////////////////////////////////////////////////////////

//______________________________________________________________________________
template<class T>
bool ObjectLoader<T>::load_objects(TDirectory* d,const string& expression)
{
  string tmp=expression;
  size_t pos=tmp.find(':');
  quantity_=(pos==string::npos)?tmp:tmp.substr(0,pos);
  tmp=(pos==string::npos)?"":tmp.substr(pos+1);
  if (tmp!="") variables_=split(tmp,":");

  for (unsigned int i=0;i<variables_.size();i++) variable_index_.push_back(i);
  for (unsigned int i=0;i<variables_.size();i++) {
    pos=variables_[i].find("#");
    if (pos==string::npos) continue;
    string index_as_string=variables_[i].substr(pos+1);
    variables_[i]=variables_[i].substr(0,pos);
    unsigned int index; stringstream ss; ss<<index_as_string;ss>>index;
    assert(index<variable_index_.size());
    unsigned int tmp=variable_index_[i];
    variable_index_[i]=index;
    variable_index_[index]=tmp;
  }

  map<int,double> fixed_values;
  for (unsigned int i=0;i<variables_.size();i++) {
    pos=variables_[i].find("@");
    if (pos==string::npos) continue;
    string value_as_string=variables_[i].substr(pos+1);
    variables_[i]=variables_[i].substr(0,pos);
    double value; stringstream ss; ss<<value_as_string;ss>>value;
    fixed_values[i]=value;
  }

  nobjects_.clear();
  for (unsigned int i=0;i<variables_.size();i++) nobjects_.push_back(0);
  bounds_.resize(nobjects_.size());
  
  TIter next(d->GetListOfKeys());
  TKey* key(0);
  while ((key=(TKey*)next())) {
    if (strcmp(key->GetClassName(),T::Class_Name())!=0) continue;
    string histname(key->GetName());
    if (histname.find(quantity_)!=0) continue;
    vector<string> histo_variables;
    if (histname!=quantity_)
      histo_variables=split(histname.substr(quantity_.length()+1),"_");
    vector< std::pair<double,double> > bounds;
    if (variables_.size()!=histo_variables.size()) continue;
    for (unsigned int i=0;i<variables_.size();i++) {
      size_t pos=histo_variables[i].find(variables_[i]);
      if (pos!=0) continue;
      string tmp=histo_variables[i].substr(variables_[i].length());
      vector<string> vtmp=split(tmp,"to");
      if (vtmp.size()!=2) continue;
      stringstream ss; double min; double max;
      ss<<vtmp.front()<<" "<<vtmp.back(); ss>>min>>max;
      if (fixed_values.find(i)!=fixed_values.end()&&
	  (fixed_values[i]<min||fixed_values[i]>=max)) continue;
      bounds.push_back(std::make_pair(min,max));
    }
    if (bounds.size()!=variables_.size()) continue;

    vector<unsigned int> indices(variables_.size());
    for (unsigned int ivar=0;ivar<variables_.size();ivar++) {
      unsigned int iivar=variable_index_[ivar];
      vector<std::pair<double,double> >varbounds=bounds_[ivar];
      if (varbounds.size()==0||bounds[ivar].first>=varbounds.back().second) {
	varbounds.push_back(bounds[ivar]);
	bounds_[ivar]=varbounds;
	indices[iivar]=nobjects_[ivar];
	nobjects_[ivar]++;
      }
      else {
	int i(0);
	vector< std::pair<double,double> >::iterator it=varbounds.begin();
	while (it!=varbounds.end()) {
	  if (*it==bounds[ivar]) {
	    indices[iivar]=i;
	    break;
	  }
	  else if (it->first > bounds[ivar].second) {
	    vector< std::pair<double,double> >::iterator last=it;last--;
	    varbounds.insert(last,bounds[ivar]);
	    bounds_[ivar]=varbounds;
	    nobjects_[ivar]++;
	    indices[iivar]=i;
	    break;
	  }
	  
	  ++i;++it;
	}
      }
    }

    compute_offset();
    set_object(indices,(T*)key->ReadObj());
  }
  
  return true;
}


//______________________________________________________________________________
template<class T>
void ObjectLoader<T>::reset()
{
  quantity_ = "";
  variables_.erase(variables_.begin(),variables_.end());
  variable_index_.erase(variable_index_.begin(),variable_index_.end());
  nobjects_.erase(nobjects_.begin(),nobjects_.end());
  offset_.erase(offset_.begin(),offset_.end());
  objects_.erase(objects_.begin(),objects_.end());
  
  bounds_.erase(bounds_.begin(),bounds_.end());

  iloop_ = 0;

}


//______________________________________________________________________________
template<class T>
template<class S>
unsigned int ObjectLoader<T>::ndigits(S number)
{
  int digits = 0;
  //if (number < 0) digits = 1; // remove this line if '-' counts as a digit
  while (number) {
    number /= 10;
    digits++;
  }
  return digits;
}


//______________________________________________________________________________
template<class T>
void ObjectLoader<T>::print()
{
  //std::string                             quantity_;
  //std::vector<std::string>                variables_;
  //std::vector<unsigned int>               variable_index_;
  //std::vector<unsigned int>               nobjects_;
  //std::vector<unsigned int>               offset_;
  //std::vector<T*>                         objects_;

  stringstream ss, ss_to_match, ss_to_match_two;
  string tmp = "ObjectLoader::print()";
  ss << std::setfill('*') << std::setw(tmp.size()+4) << "" << endl
     << "* " << tmp << " *" << endl
     << std::setfill('*') << std::setw(tmp.size()+4) << "" << endl
     << std::setfill(' ');
  ss << "* quantity = " << quantity_ << endl;
  ss << "* variables =       {";
  ss_to_match << "* variable_index_ = {";
  ss_to_match_two << "* offset_ =         {";
  for (unsigned int ivar=0; ivar<variables_.size(); ivar++)
  {
    int variable_size = variables_[ivar].size();
    ss << variables_[ivar];
    ss_to_match << std::setw(variable_size) << variable_index_[ivar];
    ss_to_match_two << std::setw(variable_size) << offset_[ivar];
    if(ivar!=variables_.size()-1)
    {
      ss << ", ";
      ss_to_match << ", ";
      ss_to_match_two << ", ";
    }
  }
  ss << "}" << endl;
  ss_to_match << "}" << endl;
  ss_to_match_two << "}" << endl;
  ss << ss_to_match.str() << ss_to_match_two.str();
  ss << "* nobjects = " << objects_.size() << endl;

  int longest_name_size = 0;
  int longest_position_size = 0;
  for (unsigned int iobj=0; iobj<objects_.size(); iobj++) {
    if(longest_name_size < string(objects_[iobj]->GetName()).size())
      longest_name_size = string(objects_[iobj]->GetName()).size();
    if(longest_position_size < ndigits<unsigned int>(iobj))
      longest_position_size =  ndigits<unsigned int>(iobj);
  }
  string col1 = "Object Name";
  string col2 = "Position";
  int col1_size = std::max(int(col1.size()), longest_name_size);
  int col2_size = std::max(int(col2.size()), longest_position_size);
  ss << std::setfill('*') << std::setw(col1_size+col2_size+5) << "" << endl
     << std::setfill(' ') << "* " << std:: setw(col1_size) << col1 << " " << std::setw(col2_size) << col2 << " *" << endl
     << std::setfill('*') << std::setw(col1_size+col2_size+5) << "" << endl
     << std::setfill(' ');
  for (unsigned int iobj=0; iobj<objects_.size(); iobj++) {
    ss << "* " << std::setw(col1_size) << objects_[iobj]->GetName() << " " << std::setw(col2_size) << iobj << endl;
  }

  cout << ss.str();
}


//______________________________________________________________________________
template <class T>
T* ObjectLoader<T>::object(unsigned int i) const
{
  vector<unsigned int> indices;
  indices.push_back(i);
  return object(indices);
}


//______________________________________________________________________________
template <class T>
T* ObjectLoader<T>::object(unsigned int i,unsigned int j) const
{
  vector<unsigned int> indices(2);
  indices[0]=i;
  indices[1]=j;
  return object(indices);
}


//______________________________________________________________________________
template <class T>
T* ObjectLoader<T>::object(unsigned int i,unsigned int j,unsigned int k) const
{
  vector<unsigned int> indices(3);
  indices[0]=i;
  indices[1]=j;
  indices[2]=k;
  return object(indices);
}


//______________________________________________________________________________
template <class T>
T* ObjectLoader<T>::object(const std::vector<unsigned int>& indices) const
{
  if (indices.size()!=nobjects_.size())
    throw std::runtime_error("ObjectLoader<T>::object: indices.size()");
  for (unsigned int i=0;i<nobjects_.size();i++)
    if (indices[i]>=nobjects(i))
      throw std::runtime_error("ObjectLoader<T>::object: index out of range");

  unsigned int index(0);
  for (unsigned i=0;i<indices.size();i++) index += indices[i]*offset_[i];
  
  return objects_[index];
}


//______________________________________________________________________________
template <class T>
T* ObjectLoader<T>::next_object(unsigned int& i) const
{
  vector<unsigned int> indices;
  T* result=next_object(indices);
  i=indices.front();
  return result;
}


//______________________________________________________________________________
template <class T>
T* ObjectLoader<T>::next_object(unsigned int& i,unsigned int& j) const
{
  vector<unsigned int> indices;
  T* result=next_object(indices);
  i=indices.front();
  j=indices.back();
  return result;
}


//______________________________________________________________________________
template <class T>
T* ObjectLoader<T>::next_object(unsigned int& i,unsigned int& j,
				unsigned int& k) const
{
  vector<unsigned int> indices;
  T* result=next_object(indices);
  i=indices[0];
  j=indices[1];
  k=indices[2];
  return result;
}


//______________________________________________________________________________
template <class T>
T* ObjectLoader<T>::next_object(vector<unsigned int>& indices) const
{
  indices.resize(nobjects_.size());
  if (iloop_==objects_.size()) return 0;
  for (unsigned int i=0;i<nobjects_.size();i++) {
    indices[i]=iloop_;
    for (unsigned int j=0;j<i;j++) indices[i]-=indices[j]*offset_[j];
    indices[i]/=offset_[i];
  }
  T* result=objects_[iloop_];
  iloop_++;
  return result;
}


//______________________________________________________________________________
template <class T>
void ObjectLoader<T>::set_object(const vector<unsigned int>& indices,T* obj)
{
  unsigned int index(0);
  for (unsigned int i=0;i<nobjects_.size();i++) {
    if (indices[i]>=nobjects(i))throw std::runtime_error("index out of range");
    index+=indices[i]*offset_[i];
  }
  typename std::vector<T*>::iterator it=objects_.begin();
  for (unsigned int i=0;i<index;i++) ++it;
  objects_.insert(it,obj);
}


//______________________________________________________________________________
template <class T>
vector<string> ObjectLoader<T>::split(const string& str,const string& delim)
{
  vector<string> result;
  string tmp=str;
  while (tmp.length()>0) {
    size_t pos=tmp.find(delim);
    if (pos==string::npos) {
      result.push_back(tmp);
      tmp="";
    }
    else {
      result.push_back(tmp.substr(0,pos));
      tmp=tmp.substr(pos+delim.length());
    }
  }
  return result;
}


//______________________________________________________________________________
template <class T>
double ObjectLoader<T>::minimum(unsigned int ivar,unsigned int iobject) const
{
  return bounds_[variable_index_[ivar]][iobject].first;
}


//______________________________________________________________________________
template <class T>
double ObjectLoader<T>::maximum(unsigned int ivar,unsigned int iobject) const
{
  return bounds_[variable_index_[ivar]][iobject].second;
}


//______________________________________________________________________________
template <class T>
void ObjectLoader<T>::compute_offset()
{
  offset_.clear();
  for (unsigned int i=1;i<nobjects_.size();i++) {
    unsigned int tmp=nobjects(i);
    for (unsigned int j=i+1;j<nobjects_.size();j++) tmp*=nobjects(j);
    offset_.push_back(tmp);
  }
  offset_.push_back(1);
  //print_offset();
}


//______________________________________________________________________________
template <class T>
void ObjectLoader<T>::print_offset()
{
  cout << "offset_ = {";
  for (unsigned int ioff=0; ioff<offset_.size(); ioff++)
  {
    cout << offset_[ioff];
    if(ioff!=offset_.size()-1)
      cout << ", ";
  }
  cout << "}" << endl;
}
