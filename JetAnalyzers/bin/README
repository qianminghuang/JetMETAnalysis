=========================================================================
Description of the executables provided in JetMETAnalysis/JetMETAnalyzers
=========================================================================

See https://twiki.cern.ch/twiki/bin/view/CMS/SWGuideJetResponseAnalyzer

-------------------------
 jet_response_analyzer_x
-------------------------

PURPOSE: this application processes the (ROOT) *tree* produced by the
JetResponseAnalyzer (CMSSW fwk analyzer) and produces another file
with the respective *histograms*. Note that JetResponseAnalyzer can be
configured to produce trees or/and histograms, and the histograms
produced with this application are identical to the ones produced
directly with JetResponseAnalyzer. Output and input files store the
tree/histograms in one directory per jet algorithm.

EXAMPLE:
jet_resonse_analyzer_x config/binning.config -input JRAt.root

STEP-BY-STEP:

* open input (read) and output (recreate) files

* loop over directories found in the input file

* load the tree (default name: 't', parameter 'treename') from the
  current directory / jet algorithm, set branch addresses

* create directory in output file and book histograms

* loop over events in tree and fill histograms

* write&close output file, close input file


-----------------------
 jet_response_fitter_x
-----------------------

PURPOSE: this application processes a file containing response
histograms for each jet algorithm. The file can be produced either
directly from JetResponseAnalyzer, or processing the output *tree*
format from JetResponseAnalyzer with jet_response_analyzer_x (see
above). The response histograms in the input file are fitted with a
Gaussian applying an iterative procedure developed by Kostas
Kousouris. The resulting fits are stored in the output file. Only
those jet algorithms considered for fitting (option -algs) are
transferred to the output. Algorithms which are omitted can be added
later. Algorithms which are fitter already can not be overwritten for
now, but are skipped.

EXAMPLE:
jet_response_fitter_x -input jra.root

STEP-BY_STEP:

* open input (read) and output (update!) files

* loop over directories found in the input file

* loop over all histograms and identify response histograms by their
name, which must either begin with 'RelRsp' or 'AbsRsp'

* fit the response histogram three times with a Gaussian, adjusting
  the starting parameters each time from the result of the last
  fit. Integral, mean, and rms are used as seed parameters for the
  first iteration.

* if the histograms has no entries or the NDF comes out smaller or
  equal to five, no fit is stored, indicating downstream applications
  to consider mean and rms instead of the fit parameters of the
  Gaussian

* save output, close input & output files


------------------------------
 jet_response_and_resolution_x
------------------------------

PURPOSE: this application evaluates the response histograms for each
algorithms over several bins of a specified variable and produces a
graph with a fit. Both response and resolution are drawn. The
'variable' parameter is used to specify what type of response
(abs/rel) and as a function of which variable should be displayed. The
graphs are saved to an output file, including the fits.

EXAMPLE:
jet_response_and_resolution_x -input jra.root -variable RelRsp:RefPt -algs sc5calo,sc7calo

STEP-BY-STEP:

* open the input (read) and output (recreate) ROOT files

* loop over all directories in the input file, which correspond to the
  different jet algorithms

* load the histograms relevant for the response plots according to the
  value of 'variable'

* loop over the relevant response histograms for each algorithm and
  create response and resolution graphs. Query each histogram for its
  fit function and consider the Gaussian parameters. If a histogram
  does not have a fit function stored, use histogram mean and rms

* fit the resolution if not otherwise requested

* write the graphs to the output file (same directory structure: one
  dir per algorithm)

* create canvas for each algorithm for response and resolution. If
  there is more than one variable, e.g. JetEta and RefPt, all JetEta
  graphs are overlaid in the same canvas. Create one file per
  'formats' and canvas.

* close input and output files


---------------------
 jet_l3_correction_x
---------------------

PURPOSE: this application processes the response histograms created as
described above and computes the absolute (l3) response (vs refpt) and
correction (vs jetpt) in the 'barrel'. barrel hereby refers to the
central eta region as configured in either JetResponseAnalyzer or
jet_response_analyzer_x. The resulting graphs and fits are stored in
an output file, and the parameters of the response fit are stored in a
text file.

EXAMPLE:
jet_l3_correction_x -input jra.root

STEP-BY-STEP:

* instantiate a TApplication if not in batch mode (-batch 1), such
  that drawn canvases are being displayed

* open input (read) and output (recreate) files

* iterate over all directories in input file, each corresponding to a
  different jet algorithm

* create graphs for absolute response as a function of reference pT
  and correction as a function of jet pT

* loop over the relevant response histograms, extract mean/sigma and
  fill graphs

* fit both response and correction, draw a canvas each and create a
  file for each specified 'formats'

* write the parameters of the response fit to a text file
  "l3_<alg>.jer" (not needed, is it?)

* close input and output file



---------------------
 jet_l2_correction_x
---------------------

PURPOSE: this application calculates the relative energy correction
(w.r.t. the barrel) as a function of jetpt in each etabin, and
produces a text file with the results (=parameters of the fits in each
etabin). Needs the absolute response in the barrel as input, see above!

EXAMPLE:
jet_l2_correction_x -input jra.root

STEP-BY-STEP:

* instantiate a TApplication if not in batch mode (-batch 1), such
  that drawn canvases are being displayed

* open input (read) and output (recreate) files, as well as the
  corresponding file with the absolute (l3) response (default:
  l3.root)

* loop over the directories in the input file, each corresponding to a
  different jet algorithm

* load and loop over histograms with absolute response, refpt, and
  jetpt as a function of eta and refpt

* for each eta bin, create graphs for absolute response and correction
  as a function of refpt. Fit absolute correction with a function in
  each eta bin.

* loop over all eta/pT bins again to calculate the relative response
  in each bin w.r.t. the response in the barrel in each etabin (->
  graph&fit in each etabin)

* write the parameters of the fit to the relative (l2) correction to a
  text file, one line per etabin

* close input and output files

